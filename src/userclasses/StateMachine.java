/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */


package userclasses;

import com.codename1.capture.Capture;
import com.codename1.components.FloatingActionButton;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.ToastBar;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.util.ImageIO;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import com.parse4cn1.*;
import generated.StateMachineBase;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.codename1.ui.Display.GALLERY_IMAGE;

/**
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {
    Map<String, Object> data = new HashMap<>();

    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of
     * the constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
        Parse.initialize("http://env-3406900.mircloud.host/parse", "myAppId", "master");
    }


    @Override
    protected void onSingup_SingupAction(Component c, ActionEvent event) {
        show();
        try {
            ParseUser user = ParseUser.create(findUsername().getText(), findPassword().getText());
            user.put("email", findEmail().getText());
            user.put("mobile", findMobile().getText());
            user.signUp();
            if (user.isAuthenticated()) {
                showForm("Home", null);
            }
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }

        hide();

    }

    @Override
    protected void onMain_LoginAction(Component c, ActionEvent event) {
        show();
        try {
            ParseUser user = ParseUser.create(findUsername().getText(), findPassword().getText());
            user.login();
            if (user.isAuthenticated()) {
                showForm("Home", null);
            }
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }

        hide();
    }

    @Override
    protected void onHome_ConversitonsAction(Component c, ActionEvent event) {

        Map<String, Object> at = (Map<String, Object>) findConversitons().getModel().getItemAt(findConversitons().getSelectedIndex());

        data.put("chat", at.get("object"));

        showForm("Chat", null);


    }


    @Override
    protected void onCreateHome() {

    }

    int anInt = 0;
    List<HashMap> dataList;

    @Override
    protected void onChat_SendAction(Component c, ActionEvent event) {
        if (anInt < dataList.size()) {
            if (dataList.get(anInt).get("owner").toString().equals("you")) {

                Label label = new Label(dataList.get(anInt).get("message").toString());

                label.setUIID(dataList.get(anInt).get("owner").toString());
                if (dataList.get(anInt).get("icon") != null) {
                    EncodedImage placeholder = EncodedImage.createFromImage(fetchResourceFile().getImage("placeholder.jpg"), false);
                    String url = "http://env-3406900.mircloud.host/parse/files/myAppId/" + ((ParseFile) dataList.get(anInt).get("icon")).getName();
                    label.setIcon(URLImage.createToStorage(placeholder, url.substring(url.lastIndexOf("/") + 1), url));
                }

                findMessages().add(label);

                anInt++;
                if (anInt < dataList.size() && dataList.get(anInt).get("owner").toString().equals("him")) {
                    findSend().setHidden(true);
                    findSend().repaint();
                }
                findMessages().getParent().repaint();
            }
        } else {
            ToastBar.showErrorMessage("The end");
        }
    }

    @Override
    protected void beforeChat(Form f) {
        show();
        ParseObject chat = (ParseObject) data.get("chat");
        dataList = chat.getList("data");


        if (anInt < dataList.size() && dataList.get(anInt).get("owner").toString().equals("him")) {
            findSend().setHidden(true);
        }
        UITimer timer = new UITimer(new Runnable() {
            @Override
            public void run() {
                if (anInt < dataList.size()) {
                    if (dataList.get(anInt).get("owner").toString().equals("him")) {
                        findSend().setHidden(true);
                        Label label = new Label(dataList.get(anInt).get("message").toString());

                        label.setUIID(dataList.get(anInt).get("owner").toString());
                        if (dataList.get(anInt).get("icon") != null) {
                            EncodedImage placeholder = EncodedImage.createFromImage(StateMachine.this.fetchResourceFile().getImage("placeholder.jpg"), false);
                            String url = "http://env-3406900.mircloud.host/parse/files/myAppId/" + ((ParseFile) dataList.get(anInt).get("icon")).getName();
                            label.setIcon(URLImage.createToStorage(placeholder, url.substring(url.lastIndexOf("/") + 1), url));
                        }

                        StateMachine.this.findMessages().add(label);
                        anInt++;
                        if (anInt == dataList.size() || dataList.get(anInt).get("owner").toString().equals("you")) {
                            findSend().setHidden(false);
                        }
                        f.repaint();
                    }
                } else {
                    if (findSend().isHidden()) {
                        findSend().setHidden(false);
                        f.repaint();
                    }
                }
            }
        });
        timer.schedule(1000, true, f);

        hide();
    }

    @Override
    protected void beforeHome(Form f) {
        show();
        try {
            List<ParseObject> results;
            if (data.get("homeResults") == null) {
                ParseQuery<ParseObject> query = ParseQuery.getQuery("StoryUser");
                query.include("story");
                query.whereEqualTo("user", ParseUser.getCurrent());
                results = query.find();
                data.put("homeResults", results);
            } else {
                results = (List<ParseObject>) data.get("homeResults");
            }
            ArrayList<Map<String, Object>> d = new ArrayList<>();

            for (int i = 0; i < results.size(); i++) {
                Map<String, Object> map = new HashMap<>();
                map.put("Line1", results.get(i).getParseObject("story").getString("name"));
                map.put("object", results.get(i).getParseObject("story"));

                d.add(map);
            }

            findConversitons().setModel(new DefaultListModel(d));
            data.put("conversitons", results);
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }

        FloatingActionButton fab = FloatingActionButton.createFAB(FontImage.MATERIAL_ADD);
        FloatingActionButton add = fab.createSubFAB(FontImage.MATERIAL_SEARCH, "Add");
        FloatingActionButton create = fab.createSubFAB(FontImage.MATERIAL_CREATE, "Create");

        add.addActionListener(evt -> showForm("Add", null));
        create.addActionListener(evt -> showForm("Create", null));

        fab.bindFabToContainer(f.getContentPane());

        hide();
    }

    @Override
    protected void onAdd_ResultsAction(Component c, ActionEvent event) {
        show();

        try {
            Map<String, Object> at = (Map<String, Object>) findResults().getModel().getItemAt(findResults().getSelectedIndex());
            ParseObject story = (ParseObject) at.get("object");

            ParseQuery<ParseObject> query = ParseQuery.getQuery("StoryUser");
            query.whereEqualTo("user", ParseUser.getCurrent());
            query.whereEqualTo("story", story);
            List<ParseObject> results = query.find();


            if (results.size() == 0) {
                ParseObject object = ParseObject.create("StoryUser");
                object.put("story", story);
                object.put("user", ParseUser.getCurrent());
                object.save();
            }

            data.put("chat", story);
            showForm("Chat", null);
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }
        hide();

    }

    private void hide() {
        ((Dialog) data.get("dialog")).dispose();
    }

    private void show() {
//        if (data.get("dialog") == null)
        data.put("dialog", new InfiniteProgress().showInifiniteBlocking());
//        else
//            ((Dialog) data.get("dialog")).show();
    }

    @Override
    protected void beforeAdd(Form f) {
        show();
        try {
            ParseQuery<ParseObject> query = ParseQuery.getQuery("Story");
            query.whereNotContainedIn("objectId", (List<ParseObject>) data.get("conversitons"));
            java.util.List<ParseObject> objects = query.find();

            ArrayList<Map<String, Object>> d = new ArrayList<>();

            for (int i = 0; i < objects.size(); i++) {
                Map<String, Object> map = new HashMap<>();
                map.put("Line1", objects.get(i).getString("name"));
                map.put("object", objects.get(i));

                d.add(map);

            }
            findResults().setModel(new DefaultListModel(d));

        } catch (ParseException e) {
            e.printStackTrace();
        }
        hide();
    }


    private void save() {
        Dialog dialog = new Dialog("Create");
        dialog.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        TextField name = new TextField("");
        name.setHint("Name");
        Button save = new Button("Save");
        save.addActionListener(evt -> {
            show();
            ParseObject object = ParseObject.create("Story");
            object.put("data", data.get("create"));
            object.put("name", name.getText());
            try {
                object.save();
                dialog.dispose();

                showForm("Home", null);
            } catch (ParseException e) {
                e.printStackTrace();
                ToastBar.showErrorMessage(e.getMessage());

            }
            hide();
        });

        dialog.add(name);
        dialog.add(save);
        dialog.show();
    }


    private void send(String owner) {
        if (findMessage().getText().length() > 0 || data.get("path") != null) {
            ArrayList<Map<String, Object>> create = (ArrayList<Map<String, Object>>) data.get("create");
            Map<String, Object> map = new HashMap<>();
            Label label = new Label();

            if (findMessage().getText().length() > 0) {
                map.put("message", findMessage().getText());
                label.setText(findMessage().getText());
                findMessage().setText("");
            }
            map.put("owner", owner);
            label.setUIID(owner);

            if (data.get("path") != null) {
                try {
                    label.setIcon(Image.createImage(data.get("path").toString()).scaledWidth(50));

                    ImageIO imgIO = ImageIO.getImageIO();
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    imgIO.save(label.getIcon(), out, ImageIO.FORMAT_JPEG, 1);
                    byte[] ba = out.toByteArray();
                    ParseFile file = new ParseFile(ParseUser.getCurrent().getUsername() + ".jpg", ba, "image/jpeg");

                    file.save();

                    map.put("icon", file);

                } catch (IOException e) {
                    e.printStackTrace();
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                data.remove("path");
            }


            create.add(map);
            findMessages().add(label);

            findMessages().getParent().repaint();
            data.put("create", create);
        }
    }

    @Override
    protected void beforeCreate(Form f) {
        data.put("create", new ArrayList<Map<String, Object>>());

        findCamera().setIcon(FontImage.createMaterial(FontImage.MATERIAL_CAMERA, new Style()));
        findGallery().setIcon(FontImage.createMaterial(FontImage.MATERIAL_PHOTO_LIBRARY, new Style()));
        findEmoji().setIcon(FontImage.createMaterial(FontImage.MATERIAL_INSERT_EMOTICON, new Style()));

        f.getToolbar().addMaterialCommandToRightBar("", FontImage.MATERIAL_SAVE, evt -> save());

    }


    @Override
    protected void onCreate_CameraAction(Component c, ActionEvent event) {
        String photo = Capture.capturePhoto();
        if (photo != null)
            data.put("path", photo);


    }

    @Override
    protected void onCreate_GalleryAction(Component c, ActionEvent event) {
        Display.getInstance().openGallery(evt -> {
            try {
                data.put("path", evt.getSource().toString());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }, GALLERY_IMAGE);
    }

    @Override
    protected void onCreate_SendYouAction(Component c, ActionEvent event) {
        send("you");

    }

    @Override
    protected void onCreate_SendHimAction(Component c, ActionEvent event) {

        send("him");
    }


    @Override
    protected void onCreate_EmojiAction(Component c, ActionEvent event) {
        Dialog dialog = new Dialog("Emoji");
        String emojis[] = {"\uD83D\uDE02", "\uD83D\uDE04", "\uD83D\uDE0D"};

        for (int i = 0; i < emojis.length; i++) {
            Button cmp = new Button(emojis[i]);
            cmp.addActionListener(evt -> {
                dialog.dispose();

                insertEmoji(cmp.getText());
            });
            dialog.add(cmp);
        }

        dialog.show();
    }

    private void insertEmoji(String e) {
        findMessage().setText(findMessage().getText() + e);
    }
}
