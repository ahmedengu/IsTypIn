/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */


package userclasses;

import com.codename1.components.ToastBar;
import com.codename1.ui.Component;
import com.codename1.ui.Form;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.util.Resources;
import com.parse4cn1.Parse;
import com.parse4cn1.ParseException;
import com.parse4cn1.ParseUser;
import generated.StateMachineBase;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {
    Map<String, Object> data = new HashMap<>();

    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of
     * the constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
        Parse.initialize("http://localhost:1337/parse", "myAppId", "master");
    }


    @Override
    protected void onSingup_SingupAction(Component c, ActionEvent event) {
        try {
            ParseUser user = ParseUser.create(findUsername().getText(), findPassword().getText());
            user.put("email", findEmail().getText());
            user.put("mobile", findMobile().getText());
            user.signUp();
            if (user.isAuthenticated()) {
                showForm("Home", null);
            }
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }

    }

    @Override
    protected void onMain_LoginAction(Component c, ActionEvent event) {
        try {
            ParseUser user = ParseUser.create(findUsername().getText(), findPassword().getText());
            user.login();
            if (user.isAuthenticated()) {
                showForm("Home", null);
            }
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }


    }

    @Override
    protected void onHome_ConversitonsAction(Component c, ActionEvent event) {


    }

    @Override
    protected void onHome_AddAction(Component c, ActionEvent event) {


    }

    @Override
    protected void onCreateHome() {

    }

    @Override
    protected void onChat_SendAction(Component c, ActionEvent event) {


    }

    @Override
    protected void beforeChat(Form f) {

    }

    @Override
    protected void beforeHome(Form f) {
        ArrayList<Map<String, Object>> maps = new ArrayList<>();

    }

    @Override
    protected void onAdd_ResultsAction(Component c, ActionEvent event) {


    }

    @Override
    protected void beforeAdd(Form f) {

    }

    @Override
    protected void onHome_CreateAction(Component c, ActionEvent event) {


    }

    @Override
    protected void onCreate_SaveAction(Component c, ActionEvent event) {


    }

    @Override
    protected void onCreate_SendAction(Component c, ActionEvent event) {
        if (findYou().getText().length() > 0||findHim().getText().length() > 0) {
            ArrayList<Map<String, String>> create = (ArrayList<Map<String, String>>) data.get("create");
            Map<String, String> map = new HashMap<>();
            map.put("message", (findYou().getText().length() > 0) ? findYou().getText() : findHim().getText());
            create.add(map);

        }
    }

    @Override
    protected void beforeCreate(Form f) {
        data.put("create", new ArrayList<Map<String, String>>());
    }
}
